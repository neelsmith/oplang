/* 
Directly use txtmark in the main build script:
 */
import com.github.rjeschke.txtmark.*


apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

group = "edu.holycross.shot"
version = '0.0.5'

apply from: "versions.gradle"
apply from: "conf.gradle"

if (hasProperty('pub')) {
    System.err.print "Using configuration data from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        println "Using default configuration in 'pub.gradle'"
        apply from: "pub.gradle"
    }
}


buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}



repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/repositories/releases"
    }
}

dependencies {
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion


  
  //testCompile group: 'junit', name: 'junit', version: junitVersion
  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'

  testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitVersion
}

uploadArchives {
  repositories.mavenDeployer {
    repository(url: nexusRepo) {                   
      authentication (userName: nexusUser, password: nexusPassword)
    }
  }
}


task createMdDir() {
}
createMdDir.doLast {
  if (! buildDir.exists()) {
    buildDir.mkdir()
  }
  File  mdTop = new File(buildDir,"md")
  if (! mdTop.exists()) {
    mdTop.mkdir()
  }
  /*  File mdWork = new File(mdTop,"md")
  if (! mdWork.exists()) {
    mdWork.mkdir()
  }*/
}

task convertMd(dependsOn: [createMdDir]) {
}


convertMd.doLast {
  println "Converting MD"
  //println Processor.process("*Real* markdown", Configuration.DEFAULT)
  FileTree tree =  fileTree(mdDir) {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      println "converting " + f
      File mdSource = new File("${mdDir}/${f.relativePath}")
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/md"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File currWork = new File(treePath)
      String htmlStr = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(currWork, htmlStr)
      println "Created ${htmlFile}"
      
      String body = Processor.process( mdSource.getText("UTF-8"), Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")

    }
  }
}



// for specs with concordion:
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  println "READING FILE TREE FROM " + mdSrc
  FileTree tree = fileTree(mdSrc) {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      println "Created ${htmlFile}"

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}

// Make all testing depend on a filter copy to buildDir.
// If that works, make all testing depned on a md -> html xform,
// and write specs in markdown.
test.dependsOn setUpResources

test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")

}


